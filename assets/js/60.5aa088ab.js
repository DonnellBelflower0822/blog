(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{353:function(a,t,r){"use strict";r.r(t);var s=r(13),e=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"原理篇"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原理篇"}},[a._v("#")]),a._v(" 原理篇")]),a._v(" "),t("h2",{attrs:{id:"面试题目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面试题目"}},[a._v("#")]),a._v(" 面试题目")]),a._v(" "),t("h3",{attrs:{id:"webpack-的构建流程是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack-的构建流程是什么"}},[a._v("#")]),a._v(" webpack 的构建流程是什么")]),a._v(" "),t("ul",[t("li",[a._v("初始化参数：解析webpack配置参数，合并shell传入和webpack.config.js文件配置的参数,形成最后的配置结果；")]),a._v(" "),t("li",[a._v("开始编译：上一步得到的参数初始化compiler对象，注册所有配置的插件，插件 监听webpack构建生命周期的事件节点，做出相应的反应，执行对象的run方法开始执行编译；")]),a._v(" "),t("li",[a._v("确定入口：从配置的entry入口，开始解析文件构建AST语法树，找出依赖，递归下去；")]),a._v(" "),t("li",[a._v("编译模块：递归中根据文件类型和loader配置，调用所有配置的loader对文件进行转换，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；")]),a._v(" "),t("li",[a._v("完成模块编译并输出：递归完事后，得到每个文件结果，包含每个模块以及他们之间的依赖关系，根据entry或分包配置生成代码块chunk;")]),a._v(" "),t("li",[a._v("输出完成：输出所有的chunk到文件系统；")])]),a._v(" "),t("h2",{attrs:{id:"热更新原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#热更新原理"}},[a._v("#")]),a._v(" 热更新原理")]),a._v(" "),t("h2",{attrs:{id:"手写"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#手写"}},[a._v("#")]),a._v(" 手写")]),a._v(" "),t("h3",{attrs:{id:"手写webpack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#手写webpack"}},[a._v("#")]),a._v(" 手写webpack")]),a._v(" "),t("h3",{attrs:{id:"手写loader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#手写loader"}},[a._v("#")]),a._v(" 手写loader")]),a._v(" "),t("h3",{attrs:{id:"手写plugin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#手写plugin"}},[a._v("#")]),a._v(" 手写plugin")])])}),[],!1,null,null,null);t.default=e.exports}}]);