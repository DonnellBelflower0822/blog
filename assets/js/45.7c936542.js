(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{334:function(a,v,_){"use strict";_.r(v);var e=_(13),l=Object(e.a)({},(function(){var a=this,v=a._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h1",{attrs:{id:"webpack"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[a._v("#")]),a._v(" Webpack")]),a._v(" "),v("h2",{attrs:{id:"概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[a._v("#")]),a._v(" 概念")]),a._v(" "),v("p",[a._v("webpack 是一个用于现代 "),v("code",[a._v("JavaScript")]),a._v(" 应用程序的 "),v("code",[a._v("静态模块打包")]),a._v("工具")]),a._v(" "),v("ul",[v("li",[a._v("默认只对"),v("code",[a._v("js和json")]),a._v("进行处理，其他类型需要借助loader")]),a._v(" "),v("li",[a._v("打包：它会在内部构建一个 "),v("code",[a._v("依赖图(dependency graph)")]),a._v("，此依赖图对应映射到项目所需的每个模块，并生成"),v("code",[a._v("一个或多个 bundle")])])]),a._v(" "),v("h2",{attrs:{id:"loader-加载器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#loader-加载器"}},[a._v("#")]),a._v(" loader 加载器")]),a._v(" "),v("ul",[v("li",[a._v("作用\n"),v("ul",[v("li",[a._v("webpack 只能理解 JavaScript 和 JSON 文件")]),a._v(" "),v("li",[a._v("loader 让 webpack 能够去处理其他类型的文件，并将它们转换为有效 模块，以供应用程序使用，以及被添加到依赖图中。")])])]),a._v(" "),v("li",[a._v("特点\n"),v("ul",[v("li",[a._v("loader 支持"),v("code",[a._v("链式")]),a._v("调用。链中的每个 loader 会将转换应用在已处理过的资源上。一组链式的 loader 将按照"),v("code",[a._v("相反")]),a._v("的顺序执行。链中的第一个 loader 将其结果（也就是应用过转换后的资源）传递给下一个 loader，依此类推。最后，链中的最后一个 loader，返回 webpack 所期望的 JavaScript。")]),a._v(" "),v("li",[a._v("loader 可以是"),v("code",[a._v("同步")]),a._v("的，也可以是"),v("code",[a._v("异步")]),a._v("的。")]),a._v(" "),v("li",[a._v("loader 运行在 Node.js 中，并且能够执行任何操作。")]),a._v(" "),v("li",[a._v("loader 可以通过 "),v("code",[a._v("options")]),a._v(" 对象配置")]),a._v(" "),v("li",[a._v("除了常见的通过 package.json 的 main 来将一个 npm 模块导出为 loader，还可以在 module.rules 中使用 loader 字段直接引用一个模块。")]),a._v(" "),v("li",[a._v("插件(plugin)可以为 loader 带来更多特性。")]),a._v(" "),v("li",[a._v("loader 能够产生额外的任意文件。")])])])]),a._v(" "),v("h3",{attrs:{id:"常用loader"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常用loader"}},[a._v("#")]),a._v(" 常用loader")]),a._v(" "),v("ul",[v("li",[a._v("babel-loader: 转换js\n"),v("ul",[v("li",[a._v("优化\n"),v("ul",[v("li",[a._v("'babel-loader?cacheDirectory'")]),a._v(" "),v("li",[a._v("排除 node_modules")]),a._v(" "),v("li",[a._v("优化辅助代码 "),v("code",[a._v("plugins: ['@babel/plugin-transform-runtime']")])])])])])]),a._v(" "),v("li",[a._v("postcss-loader\n"),v("ul",[v("li",[a._v("使用 JS 插件转换样式")]),a._v(" "),v("li",[a._v("补全css和处理css兼容性")])])]),a._v(" "),v("li",[a._v("css-loader")]),a._v(" "),v("li",[a._v("style-loader")]),a._v(" "),v("li",[a._v("less-loader")]),a._v(" "),v("li",[a._v("MiniCssExtractPlugin.loader")]),a._v(" "),v("li",[a._v("asset/resource 处理资源")]),a._v(" "),v("li",[a._v("ts-loader")]),a._v(" "),v("li",[a._v("vue-loader")])]),a._v(" "),v("h2",{attrs:{id:"plugin-插件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#plugin-插件"}},[a._v("#")]),a._v(" plugin 插件")]),a._v(" "),v("ul",[v("li",[a._v("插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。")])]),a._v(" "),v("h3",{attrs:{id:"常见plugins"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常见plugins"}},[a._v("#")]),a._v(" 常见plugins")]),a._v(" "),v("ul",[v("li",[a._v("html-webpack-plugin: 简化了 HTML 文件的创建")]),a._v(" "),v("li",[a._v("SplitChunksPlugin: 拆分chunks")]),a._v(" "),v("li",[a._v("EnvironmentPlugin: 环境变量 process.env.xxx")]),a._v(" "),v("li",[a._v("CopyWebpackPlugin: 复制文件")]),a._v(" "),v("li",[a._v("MiniCssExtractPlugin: 将css文件独立成文件")]),a._v(" "),v("li",[a._v("EslintWebpackPlugin:")]),a._v(" "),v("li",[a._v("VueLoaderPlugin: vue")]),a._v(" "),v("li",[a._v("webpack-bundle-analyzer: 打包文件分析")])]),a._v(" "),v("h2",{attrs:{id:"loader和plugin的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#loader和plugin的区别"}},[a._v("#")]),a._v(" Loader和Plugin的区别")]),a._v(" "),v("ul",[v("li",[a._v("Loader 本质就是一个函数，在该函数中对接收到的"),v("code",[a._v("内容")]),a._v("进行转换，返回转换后的结果。")]),a._v(" "),v("li",[a._v("Plugin 就是插件，基于事件流框架 Tapable，插件可以扩展 Webpack 的功能，在 Webpack 运行的"),v("code",[a._v("生命周期")]),a._v("中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。")]),a._v(" "),v("li",[a._v("配置位置\n"),v("ul",[v("li",[a._v("Loader 在 module.rules 中配置，作为模块的解析规则，类型为数组。每一项都是一个 Object，内部包含了 test(类型文件)、loader、options (参数)等属性。")]),a._v(" "),v("li",[a._v("Plugin 在 plugins 中单独配置，类型为数组，每一项是一个 Plugin 的实例，参数都通过构造函数传入。")])])]),a._v(" "),v("li",[a._v("执行顺序\n"),v("ul",[v("li",[a._v("Loader: 从右到左")]),a._v(" "),v("li",[a._v("Plugin: 从左到右")])])])]),a._v(" "),v("h2",{attrs:{id:"使用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[a._v("#")]),a._v(" 使用")]),a._v(" "),v("h3",{attrs:{id:"预加载preload-预获取prefetch"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#预加载preload-预获取prefetch"}},[a._v("#")]),a._v(" 预加载preload/预获取prefetch")]),a._v(" "),v("ul",[v("li",[a._v("preload(预加载)：当前导航下可能需要资源")]),a._v(" "),v("li",[a._v("prefetch(预获取)：将来某些导航下可能需要的资源")])]),a._v(" "),v("h4",{attrs:{id:"区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[a._v("#")]),a._v(" 区别")]),a._v(" "),v("ul",[v("li",[a._v("加载时机\n"),v("ul",[v("li",[a._v("preload chunk 会在父 chunk 加载时，以并行方式同时开始加载。")]),a._v(" "),v("li",[a._v("prefetch chunk 会在父 chunk 加载结束后才开始加载。")])])]),a._v(" "),v("li",[a._v("优先级\n"),v("ul",[v("li",[a._v("preload chunk 具有中等优先级，并立即下载。")]),a._v(" "),v("li",[a._v("prefetch chunk 在浏览器闲置时下载。")])])]),a._v(" "),v("li",[a._v("使用时机\n"),v("ul",[v("li",[a._v("preload chunk 会在父 chunk 中立即请求，用于当下时刻。")]),a._v(" "),v("li",[a._v("prefetch chunk 会用于未来的某个时刻。")])])]),a._v(" "),v("li",[a._v("浏览器支持程度不同。")]),a._v(" "),v("li",[a._v("配置\n"),v("ul",[v("li",[a._v("preload: "),v("code",[a._v("import(/* webpackPreload: true */ './path/to/js')")])]),a._v(" "),v("li",[a._v("prefetch: "),v("code",[a._v("import(/* webpackPrefetch: true */ './path/to/js')")])])])])]),a._v(" "),v("h3",{attrs:{id:"mode"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mode"}},[a._v("#")]),a._v(" mode")]),a._v(" "),v("ul",[v("li",[a._v("optimization.chunkIds\n"),v("ul",[v("li",[a._v("development: named")]),a._v(" "),v("li",[a._v("production: deterministic")]),a._v(" "),v("li",[a._v("chunkIds的值\n"),v("ul",[v("li",[a._v("'natural'\t按使用顺序的数字 id。")]),a._v(" "),v("li",[a._v("'named'\t对调试更友好的可读的 id。")]),a._v(" "),v("li",[a._v("'deterministic'\t在不同的编译中不变的短数字 id。有益于长期缓存。在生产模式中会默认开启。")]),a._v(" "),v("li",[a._v("'size'\t专注于让初始下载包大小更小的数字 id。")]),a._v(" "),v("li",[a._v("'total-size'\t专注于让总下载包大小更小的数字 id。")])])])])])]),a._v(" "),v("h3",{attrs:{id:"分割文件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分割文件"}},[a._v("#")]),a._v(" 分割文件")]),a._v(" "),v("p",[a._v("webpack 将根据以下条件自动拆分 chunks：")]),a._v(" "),v("ul",[v("li",[a._v("新的 chunk 可以被共享，或者模块来自于 node_modules 文件夹")]),a._v(" "),v("li",[a._v("新的 chunk 体积大于 20kb（在进行 min+gz 之前的体积）")]),a._v(" "),v("li",[a._v("当按需加载 chunks 时，并行请求的最大数量小于或等于 30")]),a._v(" "),v("li",[a._v("当加载初始化页面时，并发请求的最大数量小于或等于 30")])]),a._v(" "),v("h2",{attrs:{id:"优化手段"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优化手段"}},[a._v("#")]),a._v(" 优化手段")]),a._v(" "),v("h3",{attrs:{id:"hash"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[a._v("#")]),a._v(" hash")]),a._v(" "),v("blockquote",[v("p",[a._v("filename: [name].[contenthash][ext]")])]),a._v(" "),v("ul",[v("li",[a._v("hash ：任何一个文件改动，整个项目的构建 hash 值都会改变；")]),a._v(" "),v("li",[a._v("chunkhash：文件的改动只会影响其所在 chunk 的 hash 值；")]),a._v(" "),v("li",[a._v("contenthash：每个文件都有单独的 hash 值，文件的改动只会影响自身的 hash 值")])]),a._v(" "),v("h3",{attrs:{id:"优化构建速度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优化构建速度"}},[a._v("#")]),a._v(" 优化构建速度")]),a._v(" "),v("ul",[v("li",[a._v("resolve.extensions: 高频文件后缀名放前面；")]),a._v(" "),v("li",[a._v("externals: 从输出的 bundle 中排除依赖")]),a._v(" "),v("li",[a._v("module.rule 缩小范围")]),a._v(" "),v("li",[a._v("babel-loader\n"),v("ul",[v("li",[a._v("开启缓存 babel-loader?cacheDirectory")]),a._v(" "),v("li",[a._v("缓存位置： node_modules/.cache/babel-loader")])])]),a._v(" "),v("li",[a._v("合理利用alias")])]),a._v(" "),v("h3",{attrs:{id:"优化构建结果"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优化构建结果"}},[a._v("#")]),a._v(" 优化构建结果")]),a._v(" "),v("ul",[v("li",[a._v("webpack-bundle-analyzer分析打包结果")]),a._v(" "),v("li",[a._v("css-minimizer-webpack-plugin压缩css文件")]),a._v(" "),v("li",[a._v("terser-webpack-plugin 压缩js")])]),a._v(" "),v("h3",{attrs:{id:"优化运行时"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优化运行时"}},[a._v("#")]),a._v(" 优化运行时")]),a._v(" "),v("ul",[v("li",[a._v("入口点分割")]),a._v(" "),v("li",[a._v("splitChunks拆分chunks")]),a._v(" "),v("li",[a._v("代码懒加载")])]),a._v(" "),v("h2",{attrs:{id:"题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#题"}},[a._v("#")]),a._v(" 题")]),a._v(" "),v("h3",{attrs:{id:"source-map是什么-生产环境怎么用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#source-map是什么-生产环境怎么用"}},[a._v("#")]),a._v(" source map是什么？生产环境怎么用？")]),a._v(" "),v("ul",[v("li",[a._v("source map 是将编译、打包、压缩后的代码映射回"),v("code",[a._v("源代码")]),a._v("的过程。")]),a._v(" "),v("li",[a._v("打包压缩后的代码不具备良好的"),v("code",[a._v("可读性")]),a._v("，想要调试源码就需要 soucre map。")]),a._v(" "),v("li",[a._v("map文件只要不打开开发者工具，浏览器是不会加载的。")]),a._v(" "),v("li",[a._v("线上环境一般有三种处理方案：\n"),v("ul",[v("li",[a._v("hidden-source-map：借助第三方错误监控平台 Sentry 使用")]),a._v(" "),v("li",[a._v("nosources-source-map：只会显示具体行数以及查看源代码的错误栈。安全性比 sourcemap 高")]),a._v(" "),v("li",[a._v("sourcemap：通过 nginx 设置将 .map 文件只对白名单开放(公司内网)")])])]),a._v(" "),v("li",[a._v("注意：避免在生产中使用 inline- 和 eval-，因为它们会增加 bundle 体积大小，并降低整体性能")])]),a._v(" "),v("h3",{attrs:{id:"使用webpack开发时-你用过哪些可以提高效率的插件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#使用webpack开发时-你用过哪些可以提高效率的插件"}},[a._v("#")]),a._v(" 使用webpack开发时，你用过哪些可以提高效率的插件？")]),a._v(" "),v("ul",[v("li",[a._v("webpack-merge: 合并webpack配置")]),a._v(" "),v("li",[a._v("webpack-devServer: 热更新")]),a._v(" "),v("li",[a._v("webpack-bundle-analyzer-plugin: 分析打包后的结果")])]),a._v(" "),v("h3",{attrs:{id:"模块打包原理知道吗"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#模块打包原理知道吗"}},[a._v("#")]),a._v(" 模块打包原理知道吗？")]),a._v(" "),v("p",[a._v("Webpack 实际上为每个模块创造了一个可以"),v("code",[a._v("导出和导入")]),a._v("的环境，本质上并没有修改 代码的执行逻辑，代码执行顺序与模块加载顺序也完全一致。")]),a._v(" "),v("h3",{attrs:{id:"文件监听原理呢"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#文件监听原理呢"}},[a._v("#")]),a._v(" 文件监听原理呢？")]),a._v(" "),v("ul",[v("li",[a._v("在发现源码发生变化时，自动重新构建出新的输出文件。")])]),a._v(" "),v("h3",{attrs:{id:"说一下-webpack-的热更新原理吧"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#说一下-webpack-的热更新原理吧"}},[a._v("#")]),a._v(" 说一下 Webpack 的热更新原理吧")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("Webpack 的热更新又称热替换（Hot Module Replacement），缩写为 HMR。 这个机制可以做到"),v("code",[a._v("不用刷新浏览器")]),a._v("而将新变更的模块"),v("code",[a._v("替换")]),a._v("掉旧的模块。")])]),a._v(" "),v("li",[v("p",[a._v("HMR的核心就是客户端从服务端拉去"),v("code",[a._v("更新后")]),a._v("的文件，准确的说是 chunk diff (chunk 需要更新的部分)，实际上 WDS 与浏览器之间维护了一个 Websocket，")])]),a._v(" "),v("li",[v("p",[a._v("当本地资源发生变化时，WDS 会向浏览器推送更新，并带上构建时的 hash，让客户端与上一次资源进行对比。客户端对比出差异后会向 WDS 发起 Ajax 请求来获取更改内容(文件列表、hash)，这样客户端就可以再借助这些信息继续向 WDS 发起 jsonp 请求获取该chunk的增量更新。")])])])])}),[],!1,null,null,null);v.default=l.exports}}]);