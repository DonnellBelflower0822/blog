(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{231:function(v,_,t){v.exports=t.p+"assets/img/3time.38cddadf.png"},232:function(v,_,t){v.exports=t.p+"assets/img/2time-question.9d59c527.png"},276:function(v,_,t){v.exports=t.p+"assets/img/osi.997f1377.png"},277:function(v,_,t){v.exports=t.p+"assets/img/tcp.085e1a4a.jpeg"},326:function(v,_,t){"use strict";t.r(_);var a=t(13),e=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"网络协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#网络协议"}},[v._v("#")]),v._v(" 网络协议")]),v._v(" "),_("ul",[_("li",[v._v("https://juejin.cn/post/6857287743966281736#heading-61")]),v._v(" "),_("li",[v._v("https://juejin.cn/post/6908327746473033741")]),v._v(" "),_("li",[v._v("https://juejin.cn/post/6844904070889603085")]),v._v(" "),_("li",[v._v("https://juejin.cn/post/6847902222349500430")])]),v._v(" "),_("h2",{attrs:{id:"任务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#任务"}},[v._v("#")]),v._v(" 任务")]),v._v(" "),_("ul",[_("li",[v._v("http\n"),_("ul",[_("li",[v._v("特点")]),v._v(" "),_("li",[v._v("版本\n"),_("ul",[_("li",[v._v("1.0")]),v._v(" "),_("li",[v._v("1.1")]),v._v(" "),_("li",[v._v("2.0")]),v._v(" "),_("li",[v._v("3.0")])])]),v._v(" "),_("li",[v._v("报文")]),v._v(" "),_("li",[v._v("状态码")]),v._v(" "),_("li",[v._v("HTTPS")])])]),v._v(" "),_("li",[v._v("cookie/session")]),v._v(" "),_("li",[v._v("缓存机制\n"),_("ul",[_("li",[v._v("cookie,session")]),v._v(" "),_("li",[v._v("localstorage，sessionstorage")]),v._v(" "),_("li",[v._v("indexDB")])])]),v._v(" "),_("li",[v._v("跨域")]),v._v(" "),_("li",[v._v("安全\n"),_("ul",[_("li",[v._v("XSS")]),v._v(" "),_("li",[v._v("CSRF")])])])]),v._v(" "),_("h2",{attrs:{id:"tcp的三次握手和四次挥手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp的三次握手和四次挥手"}},[v._v("#")]),v._v(" tcp的三次握手和四次挥手")]),v._v(" "),_("h3",{attrs:{id:"三次握手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三次握手"}},[v._v("#")]),v._v(" 三次握手")]),v._v(" "),_("blockquote",[_("p",[v._v("都是在不可靠的网络通信中建立可靠的连接")])]),v._v(" "),_("img",{attrs:{src:t(231)}}),v._v(" "),_("p",[_("strong",[v._v("细节")])]),v._v(" "),_("ol",[_("li",[v._v("客户端发送SYN到服务端, 请求建立连接")]),v._v(" "),_("li",[v._v("如果可以连接, 服务端会发送SYN+ACK包给客户端")]),v._v(" "),_("li",[v._v("客户端收到后发送ACK包建立连接, 服务端收到ACK包后建立连接")])]),v._v(" "),_("p",[_("strong",[v._v("如果是两次握手会存在的问题")])]),v._v(" "),_("img",{attrs:{src:t(232)}}),v._v(" "),_("blockquote",[_("p",[v._v("第三次握手的作用是客户端对服务器端的初始序号的确认。如果只使用两次握手，那么服务器就没有办法知道自己的序号是否 已被确认。同时这样也是为了防止失效的请求报文段被服务器接收，而出现错误的情况。")])]),v._v(" "),_("p",[_("strong",[v._v("细节")])]),v._v(" "),_("ol",[_("li",[v._v("第一次发送SYN到服务端,由于网络等问题,没有到达服务端")]),v._v(" "),_("li",[v._v("客户端重发SYN包")]),v._v(" "),_("li",[v._v("服务端接收到SYN包后回复SYN+ACK,直接建立连接")]),v._v(" "),_("li",[v._v("之前未到达的SYN到达服务端,服务端会以为是新的建立请求,但客户端是同一个建立请求.出现了状态不一致")])]),v._v(" "),_("h3",{attrs:{id:"四次挥手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手"}},[v._v("#")]),v._v(" 四次挥手")]),v._v(" "),_("p",[_("strong",[v._v("细节")])]),v._v(" "),_("ol",[_("li",[v._v("客户端向服务端发送一个FIN包,表示要关闭连接,自己进入终止等待1状态")]),v._v(" "),_("li",[v._v("服务端向客户端发送一个ACK包,便是服务端进入关闭等待状态, 客户端进入终止等待2状态")])]),v._v(" "),_("p",[v._v("中间客户端还可以接收发送请求,客户端还可以发送响应")]),v._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[v._v("服务端向客户端发送FIN包,进入最后确认状态")]),v._v(" "),_("li",[v._v("客户端收到后发送ACK包,进入"),_("code",[v._v("超时等待")]),v._v("状态,超时后关闭连接. 服务端收到ACK包后立即关闭连接")])]),v._v(" "),_("p",[_("strong",[v._v("客户端为什么要超时等待")])]),v._v(" "),_("blockquote",[_("p",[v._v("保证ACK发送到服务端")])]),v._v(" "),_("ul",[_("li",[v._v("客户端发送ACK包后立即关闭连接,如果由于网络问题,服务端没收到ACK包,服务端会停留在 LAST-ACK(最后确认状态).")]),v._v(" "),_("li",[v._v("客户端回复ACK包后超时等待, 如果服务端在一定时间内未收到ACK包,服务端会重发FIN包给客户端去响应")])]),v._v(" "),_("h2",{attrs:{id:"osi网络协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#osi网络协议"}},[v._v("#")]),v._v(" OSI网络协议")]),v._v(" "),_("img",{attrs:{src:t(276)}}),v._v(" "),_("h3",{attrs:{id:"tcp-ip协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip协议"}},[v._v("#")]),v._v(" TCP/IP协议")]),v._v(" "),_("ul",[_("li",[v._v("应用层、表示层、会话层三个层次提供的服务相差不是很大，所以在 TCP/IP 协议中，它们被合并为应用层一个层次。")]),v._v(" "),_("li",[v._v("由于数据链路层和物理层的内容很相似，所以在 TCP/IP 协议中它们被归并在网络接口层一个层次里")])]),v._v(" "),_("img",{attrs:{src:t(277)}}),v._v(" "),_("h3",{attrs:{id:"tcp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[v._v("#")]),v._v(" TCP")]),v._v(" "),_("ul",[_("li",[v._v("传输控制协议，也就是 Transmission Control Protocol，")]),v._v(" "),_("li",[v._v("TCP 是一种传输层的协议，")]),v._v(" "),_("li",[v._v("它是一种"),_("code",[v._v("面向连接")]),v._v("的、"),_("code",[v._v("可靠")]),v._v("的、基于字节流的传输协议，")]),v._v(" "),_("li",[v._v("TCP 协议是 TCP/IP 协议簇中的核心协议，")]),v._v(" "),_("li",[v._v("它最大的特点就是提供"),_("code",[v._v("可靠的数据交付")])])]),v._v(" "),_("h3",{attrs:{id:"udp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#udp"}},[v._v("#")]),v._v(" UDP")]),v._v(" "),_("p",[v._v("将数据包发送到服务端")]),v._v(" "),_("ul",[_("li",[v._v("优点\n"),_("ul",[_("li",[v._v("性能损耗小")]),v._v(" "),_("li",[v._v("资源占用少")])])]),v._v(" "),_("li",[v._v("缺点\n"),_("ul",[_("li",[v._v("稳定性弱")])])])]),v._v(" "),_("h2",{attrs:{id:"http"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[v._v("#")]),v._v(" HTTP")]),v._v(" "),_("ul",[_("li",[v._v("超文本传输协议")])]),v._v(" "),_("h3",{attrs:{id:"http特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http特点"}},[v._v("#")]),v._v(" HTTP特点")]),v._v(" "),_("ul",[_("li",[v._v("「"),_("code",[v._v("灵活可扩展")]),v._v("」。一个是语法上只规定了基本格式，空格分隔单词，换行分隔字段等。另外一个就是传输形式上不仅可以传输文本，还可以传输图片，视频等任意数据。")]),v._v(" "),_("li",[v._v("「"),_("code",[v._v("请求-应答模式")]),v._v("」，通常而言，就是一方发送消息，另外一方要接受消息，或者是做出相应等。")]),v._v(" "),_("li",[v._v("「"),_("code",[v._v("可靠传输")]),v._v("」，HTTP是基于TCP/IP，因此把这一特性继承了下来。")]),v._v(" "),_("li",[v._v("「无状态」，这个分场景回答即可。")])]),v._v(" "),_("h3",{attrs:{id:"http-缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-缺点"}},[v._v("#")]),v._v(" HTTP 缺点")]),v._v(" "),_("ul",[_("li",[v._v("「"),_("code",[v._v("无状态")]),v._v("」，有时候，需要保存信息，比如像购物系统，需要保留下顾客信息等等，另外一方面，有时候，无状态也会减少网络开销，比如类似直播行业这样子等，这个还是分场景来说。")]),v._v(" "),_("li",[v._v("「"),_("code",[v._v("明文传输")]),v._v("」，即协议里的报文(主要指的是头部)不使用二进制数据，而是文本形式。这让HTTP的报文信息暴露给了外界，给攻击者带来了便利。")]),v._v(" "),_("li",[v._v("「"),_("code",[v._v("队头阻塞")]),v._v("」，当http开启长连接时，共用一个TCP连接，当某个请求时间过长时，其他的请求只能处于阻塞状态，这就是队头阻塞问题。")])]),v._v(" "),_("h3",{attrs:{id:"http版本"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http版本"}},[v._v("#")]),v._v(" http版本")]),v._v(" "),_("ul",[_("li",[v._v("http1.0\n"),_("ul",[_("li",[v._v("文字,图片,视频等内容都可以发送")]),v._v(" "),_("li",[v._v("提供http的header,根据header的不同处理不同资源")]),v._v(" "),_("li",[v._v("只使用 header 中的 If-Modified-Since 和 Expires 作为缓存失效的标准。")]),v._v(" "),_("li",[v._v("不支持断点续传")])])]),v._v(" "),_("li",[v._v("http1.1\n"),_("ul",[_("li",[v._v("引入了"),_("code",[v._v("持久连接")]),v._v("（ persistent connection），即TCP连接默认不关闭，可以被多个请求复用，不用声明Connection: keep-alive。长连接的连接时长可以通过请求头中的 keep-alive 来设置")]),v._v(" "),_("li",[v._v("引入了"),_("code",[v._v("管道机制")]),v._v("（ pipelining），即在同一个TCP连接里，客户端可以同时发送多个请求，进一步改进了HTTP协议的效率。")]),v._v(" "),_("li",[v._v("HTTP 1.1 中新增加了 "),_("code",[v._v("E-tag，If-None-Match")]),v._v(" 等缓存控制标头来控制缓存失效。")]),v._v(" "),_("li",[v._v("支持断点续传，通过使用请求头中的 "),_("code",[v._v("Range")]),v._v(" 来实现。")]),v._v(" "),_("li",[v._v("新增方法：PUT、 PATCH、 OPTIONS、 DELETE。")])])]),v._v(" "),_("li",[v._v("http2.0\n"),_("ul",[_("li",[_("code",[v._v("二进制分帧")]),v._v('  这是一次彻底的二进制协议，头信息和数据体都是二进制，并且统称为"帧"：头信息帧和数据帧。')]),v._v(" "),_("li",[_("code",[v._v("头部压缩")]),v._v("  HTTP 1.1版本会出现 「User-Agent、Cookie、Accept、Server、Range」 等字段可能会占用几百甚至几千字节，而 Body 却经常只有几十字节，所以导致头部偏重。HTTP 2.0 使用 HPACK 算法进行压缩。")]),v._v(" "),_("li",[_("code",[v._v("多路复用")]),v._v(" 复用TCP连接，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，且不用按顺序一一对应，这样子解决了队头阻塞的问题。")]),v._v(" "),_("li",[_("code",[v._v("服务器推送")]),v._v(" 允许服务器未经请求，主动向客户端发送资源，即服务器推送。")]),v._v(" "),_("li",[_("code",[v._v("请求优先级")]),v._v(" 可以设置数据帧的优先级，让服务端先处理重要资源，优化用户体验")])])]),v._v(" "),_("li",[v._v("http3.0\n"),_("ul",[_("li",[v._v("解决tcp的对头阻塞问题")])])])]),v._v(" "),_("h3",{attrs:{id:"http1-x版本问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http1-x版本问题"}},[v._v("#")]),v._v(" http1.x版本问题")]),v._v(" "),_("ul",[_("li",[v._v("传输过程中, 内容都是明文")]),v._v(" "),_("li",[v._v("HTTP/1.1 版本默认允许复用TCP连接，但是在同一个TCP连接里，所有数据通信是按次序进行的，服务器通常在处理完一个回应后，才会继续去处理下一个，这样子就会造成"),_("code",[v._v("队头阻塞")]),v._v("。")]),v._v(" "),_("li",[v._v("http/1.x 版本支持Keep-alive，用此方案来弥补创建多次连接产生的延迟，但是同样会给服务器带来压力，并且的话，对于单文件被不断请求的服务，Keep-alive会极大影响性能，因为它在文件被请求之后还保持了"),_("code",[v._v("不必要")]),v._v("的连接很长时间。")]),v._v(" "),_("li",[v._v("单个域名有6-8个tcp链接请求限制")])]),v._v(" "),_("h3",{attrs:{id:"http特点-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http特点-2"}},[v._v("#")]),v._v(" HTTP特点")]),v._v(" "),_("ul",[_("li",[v._v("支持客户-服务器模式: 请求-应答")]),v._v(" "),_("li",[v._v("简单快速: 协议简单")]),v._v(" "),_("li",[v._v("灵活: 支持任意类型的传输")]),v._v(" "),_("li",[v._v("无连接: 限制每次连接只处理一个请求,服务器处理完客户端请求后,并收到客户端的应答后断开连接")]),v._v(" "),_("li",[v._v("无状态: 对事务处理没有记忆能力,需要前面传输的数据信息需要重传")])]),v._v(" "),_("h3",{attrs:{id:"请求报文"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#请求报文"}},[v._v("#")]),v._v(" 请求报文")]),v._v(" "),_("h4",{attrs:{id:"请求行"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#请求行"}},[v._v("#")]),v._v(" 请求行")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("请求方法 请求地址 http版本\n")])])]),_("h5",{attrs:{id:"请求方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#请求方法"}},[v._v("#")]),v._v(" 请求方法")]),v._v(" "),_("ul",[_("li",[v._v("GET： 请求获取Request-URI所标识的资源")]),v._v(" "),_("li",[v._v("POST：在Request-URI所标识的资源后附加新的数据")]),v._v(" "),_("li",[v._v("HEAD：请求获取由Request-URI所标识的资源的响应消息报头")]),v._v(" "),_("li",[v._v("PUT：请求服务器存储一个资源，并用Request-URI作为其标识（修改数据）")]),v._v(" "),_("li",[v._v("DELETE：请求服务器删除对应所标识的资源")]),v._v(" "),_("li",[v._v("TRACE：请求服务器回送收到的请求信息，主要用于测试或诊断")]),v._v(" "),_("li",[v._v("CONNECT：建立连接隧道，用于代理服务器")]),v._v(" "),_("li",[v._v("OPTIONS：列出可对资源实行的请求方法，用来跨域请求")])]),v._v(" "),_("p",[_("em",[v._v("options 方法有什么用？")])]),v._v(" "),_("p",[v._v("OPTIONS 请求与 HEAD 类似，一般也是用于客户端查看服务器的性能。\n这个方法会请求服务器返回该资源所支持的所有 HTTP 请求方法，该方法会用'*'来代替资源名称，向服务器发送 OPTIONS 请求，可以测试服务器功能是否正常。\nJS 的 XMLHttpRequest对象进行 CORS 跨域资源共享时，对于复杂请求，就是使用 OPTIONS 方法发送嗅探请求，以判断是否有对指定资源的访问权限。")]),v._v(" "),_("h4",{attrs:{id:"请求头部字段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#请求头部字段"}},[v._v("#")]),v._v(" 请求头部字段")]),v._v(" "),_("ul",[_("li",[v._v("Cache-Control:")]),v._v(" "),_("li",[v._v("Host: 服务器的域名")]),v._v(" "),_("li",[v._v("Referer: 告诉服务器该网页是从哪个页面链接过来的，服务器因此可以获得一些信息用于处理")]),v._v(" "),_("li",[v._v("max-age: 资源被认为仍然有效的最长时间, 这个请求是相对于 request标头的时间")]),v._v(" "),_("li",[v._v("Connection: 决定当前事务（一次三次握手和四次挥手）完成后，是否会关闭网络连接\n"),_("ul",[_("li",[v._v("持久性连接，即一次事务完成后不关闭网络连接")])])])]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("Connection: keep-alive\n")])])]),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[v._v("- 非持久性连接，即一次事务完成后关闭网络连接\n")])])]),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("Connection: close\n")])])]),_("ul",[_("li",[_("p",[v._v("If-Modified-Since")]),v._v(" "),_("ul",[_("li",[v._v("返回200，只有在给定日期的最后一次修改资源后，服务器才会以200状态发送回请求的资源。")]),v._v(" "),_("li",[v._v("如果请求从开始以来没有被修改过，响应会返回304并且没有任何响应体")])])]),v._v(" "),_("li",[_("p",[v._v("If-None-Match")]),v._v(" "),_("ul",[_("li",[v._v("对于 GET 和 HEAD 方法，仅当服务器没有与给定资源匹配的 ETag 时，服务器才会以200状态发送回请求的资源。")]),v._v(" "),_("li",[v._v("对于其他方法，仅当最终现有资源的ETag与列出的任何值都不匹配时，才会处理请求。")])])]),v._v(" "),_("li",[_("p",[v._v("Accept: 接受请求 HTTP 标头会通告客户端其能够理解的 MIME 类型")])])]),v._v(" "),_("h3",{attrs:{id:"响应报文"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#响应报文"}},[v._v("#")]),v._v(" 响应报文")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("起始行\n响应头部\n空行\n响应实体\n")])])]),_("h3",{attrs:{id:"起始行"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#起始行"}},[v._v("#")]),v._v(" 起始行")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("http版本 状态码 状态文本\n")])])]),_("h3",{attrs:{id:"状态码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#状态码"}},[v._v("#")]),v._v(" 状态码")]),v._v(" "),_("p",[_("em",[_("strong",[v._v("2xx表示请求成功响应")])])]),v._v(" "),_("ul",[_("li",[v._v("200: 成功响应")]),v._v(" "),_("li",[v._v("204: 请求成功处理,但没有资源返回(响应实体)")])]),v._v(" "),_("p",[_("em",[_("strong",[v._v("3xx需要进行附加操作加以完成")])])]),v._v(" "),_("ul",[_("li",[v._v("301: 永久重定向, 该状态码表示请求的资源已经重新分配 URI，以后应该使用资源现有的 URI")]),v._v(" "),_("li",[v._v("302: 临时性重定向。该状态码表示请求的资源已被分配了新的 URI，希望用户（本次）能使用新的 URI 访问。")]),v._v(" "),_("li",[v._v("304: 协商缓存命中")])]),v._v(" "),_("p",[_("em",[_("strong",[v._v("4xx表示客户端发生错误")])])]),v._v(" "),_("ul",[_("li",[v._v("401: Unauthorized: 表示发送的请求需要有通过 HTTP 认证的认证信息。")]),v._v(" "),_("li",[v._v("403 Forbidden: 表示对请求资源的访问被服务器拒绝。")]),v._v(" "),_("li",[v._v("404 Not Found: 表示在服务器上没有找到请求的资源。")])]),v._v(" "),_("p",[_("em",[_("strong",[v._v("5xx: 服务器发生错误")])])]),v._v(" "),_("ul",[_("li",[v._v("500 internal sever error: 表示服务器端在执行请求时发生了错误。")]),v._v(" "),_("li",[v._v("502 Bad Gateway: 服务器自身是正常的，访问的时候出了问题，")]),v._v(" "),_("li",[v._v("503 service unavailable: 服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。")]),v._v(" "),_("li",[v._v("504: 网关超时")])]),v._v(" "),_("h3",{attrs:{id:"响应头"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#响应头"}},[v._v("#")]),v._v(" 响应头")]),v._v(" "),_("ul",[_("li",[v._v("Access-Control-Allow-Origin: 指定一个来源，它告诉浏览器允许该来源进行"),_("code",[v._v("资源访问")])]),v._v(" "),_("li",[v._v("Keep-Alive:")]),v._v(" "),_("li",[v._v("Transfer-Encoding: chunked: 规定了传输报文主体时采用的编码方式")]),v._v(" "),_("li",[v._v("Set-Cookie:")])]),v._v(" "),_("h2",{attrs:{id:"https"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[v._v("#")]),v._v(" HTTPS")]),v._v(" "),_("ul",[_("li",[v._v("HTTP 一般是明文传输，很容易被攻击者窃取重要信息")]),v._v(" "),_("li",[v._v("HTTPS 的全称为 （Hyper Text Transfer Protocol over SecureSocket Layer），全称有点长，HTTPS 和 HTTP 有很大的不同在于 HTTPS 是以"),_("code",[v._v("安全")]),v._v("为目标的 HTTP 通道，")]),v._v(" "),_("li",[v._v("在 HTTP 的基础上通过"),_("code",[v._v("传输加密和身份认证")]),v._v("保证了传输过程的安全性。HTTPS 在 HTTP 的基础上增加了 SSL 层，也就是说 HTTPS = HTTP + SSL。")])]),v._v(" "),_("h2",{attrs:{id:"cdn"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cdn"}},[v._v("#")]),v._v(" CDN")]),v._v(" "),_("blockquote",[_("p",[v._v("Content Delivery Network，即内容分发网络，它应用了 HTTP 协议里的缓存和代理技术，代替源站响应客户端的请求。CDN 是构建在现有网络基础之上的网络，它依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。")])]),v._v(" "),_("h2",{attrs:{id:"正向代理-反向代理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#正向代理-反向代理"}},[v._v("#")]),v._v(" 正向代理/反向代理")]),v._v(" "),_("ul",[_("li",[v._v("正向代理: 走一个中介,代理请求者的网络内部, 访问外部网络")]),v._v(" "),_("li",[v._v("反向代理: 请求到服务器, 转发到内部其他服务器")])]),v._v(" "),_("h3",{attrs:{id:"options-方法有什么用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#options-方法有什么用"}},[v._v("#")]),v._v(" options 方法有什么用？")]),v._v(" "),_("p",[v._v("OPTIONS 请求与 HEAD 类似，一般也是用于客户端查看服务器的性能。\n这个方法会请求服务器返回该资源所支持的所有 HTTP 请求方法，该方法会用'*'来代替资源名称，向服务器发送 OPTIONS 请求，可以测试服务器功能是否正常。\nJS 的 XMLHttpRequest对象进行 CORS 跨域资源共享时，对于复杂请求，就是使用 OPTIONS 方法发送嗅探请求，以判断是否有对指定资源的访问权限。")]),v._v(" "),_("h3",{attrs:{id:"介绍一下https和http区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#介绍一下https和http区别"}},[v._v("#")]),v._v(" 介绍一下HTTPS和HTTP区别")]),v._v(" "),_("p",[v._v("HTTPS 要比 HTTP 多了 secure 安全性这个概念，\n实际上， HTTPS 并不是一个新的应用层协议，\n它其实就是 HTTP + TLS/SSL 协议组合而成，而安全性的保证正是 SSL/TLS 所做的工作。\n「SSL」 安全套接层（Secure Sockets Layer）\n「TLS」（传输层安全，Transport Layer Security）\n现在主流的版本是 TLS/1.2, 之前的 TLS1.0、TLS1.1 都被认为是不安全的，在不久的将来会被完全淘汰。\n「HTTPS 就是身披了一层 SSL 的 HTTP」。")]),v._v(" "),_("h4",{attrs:{id:"那么区别有哪些呢"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#那么区别有哪些呢"}},[v._v("#")]),v._v(" 那么区别有哪些呢")]),v._v(" "),_("ul",[_("li",[v._v("HTTP 是明文传输协议，HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安全。")]),v._v(" "),_("li",[v._v("HTTPS比HTTP更加安全，对搜索引擎更友好，利于SEO,谷歌、百度优先索引HTTPS网页。")]),v._v(" "),_("li",[v._v("HTTPS标准端口443，HTTP标准端口80。")]),v._v(" "),_("li",[v._v("HTTPS需要用到SSL证书，而HTTP不用。")])]),v._v(" "),_("h4",{attrs:{id:"https-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https-2"}},[v._v("#")]),v._v(" HTTPS")]),v._v(" "),_("ul",[_("li",[v._v("对数据进行加密，并建立一个信息安全通道，来保证传输过程中的数据安全;")]),v._v(" "),_("li",[v._v("对网站服务器进行真实身份认证。")])]),v._v(" "),_("h2",{attrs:{id:"对-websocket-的理解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#对-websocket-的理解"}},[v._v("#")]),v._v(" 对 WebSocket 的理解")]),v._v(" "),_("p",[v._v("WebSocket是HTML5提供的一种浏览器与服务器进行全双工通讯的网络技术，属于应用层协议。它基于TCP传输协议，并复用HTTP的握手通道。浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接， 并进行双向数据传输。\nWebSocket 的出现就解决了半双工通信的弊端。它最大的特点是：服务器可以向客户端主动推动消息，客户端也可以主动向服务器推送消息。\nWebSocket原理：客户端向 WebSocket 服务器通知（notify）一个带有所有接收者ID（recipients IDs）的事件（event），服务器接收后立即通知所有活跃的（active）客户端，只有ID在接收者ID序列中的客户端才会处理这个事件。\n​\nWebSocket 特点的如下：")]),v._v(" "),_("p",[v._v("支持双向通信，实时性更强\n可以发送文本，也可以发送二进制数据\n建立在TCP协议之上，服务端的实现比较容易\n数据格式比较轻量，性能开销小，通信高效\n没有同源限制，客户端可以与任意服务器通信\n协议标识符是ws（如果加密，则为wss），服务器网址就是 URL\n与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。")])])}),[],!1,null,null,null);_.default=e.exports}}]);