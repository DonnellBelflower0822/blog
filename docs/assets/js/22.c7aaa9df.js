(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{388:function(t,a,s){"use strict";s.r(a);var v=s(44),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"内存管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存管理"}},[t._v("#")]),t._v(" 内存管理")]),t._v(" "),s("ul",[s("li",[t._v("内存: 由可读写单元组成,代表一片可操作空间")]),t._v(" "),s("li",[t._v("管理: 人为的去操作一片空间的申请,使用和释放")]),t._v(" "),s("li",[t._v("内存管理:开发者主动申请空间,使用空间,释放空间")]),t._v(" "),s("li",[t._v("管理流程:申请 -> 使用 -> 释放")])]),t._v(" "),s("h2",{attrs:{id:"js中模拟管理流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js中模拟管理流程"}},[t._v("#")]),t._v(" js中模拟管理流程")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 申请")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用:读写")]),t._v("\nobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'allen'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 释放")]),t._v("\nobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n")])])]),s("h2",{attrs:{id:"js中的垃圾"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js中的垃圾"}},[t._v("#")]),t._v(" js中的垃圾")]),t._v(" "),s("ul",[s("li",[t._v("js中内存管理是自动的")]),t._v(" "),s("li",[t._v("对象不再被引用时就是垃圾")]),t._v(" "),s("li",[t._v("对象不能从根上访问到时是垃圾")])]),t._v(" "),s("h2",{attrs:{id:"可达对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可达对象"}},[t._v("#")]),t._v(" 可达对象")]),t._v(" "),s("ul",[s("li",[t._v("可以访问到的对象(引用,作用域链)")]),t._v(" "),s("li",[t._v("可达的标准就是从根触发是否能够被找到")]),t._v(" "),s("li",[t._v("js的根就是全局变量对象")])]),t._v(" "),s("h2",{attrs:{id:"gc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gc"}},[t._v("#")]),t._v(" GC")]),t._v(" "),s("ul",[s("li",[t._v("垃圾回收机制")]),t._v(" "),s("li",[t._v("找到内存中的垃圾,并释放和回收空间")])]),t._v(" "),s("h3",{attrs:{id:"gc里的垃圾"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gc里的垃圾"}},[t._v("#")]),t._v(" GC里的垃圾")]),t._v(" "),s("ul",[s("li",[t._v("程序中不再需要使用的对象")]),t._v(" "),s("li",[t._v("程序中不能再被访问到的对象")])]),t._v(" "),s("h3",{attrs:{id:"gc算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gc算法"}},[t._v("#")]),t._v(" GC算法")]),t._v(" "),s("ul",[s("li",[t._v("是一种机制,垃圾回收器完成具体的工作")]),t._v(" "),s("li",[t._v("工作内容: 查找垃圾释放空间,回收空间")]),t._v(" "),s("li",[t._v("算法就是工作时查找和回收所遵循的规则")])]),t._v(" "),s("h2",{attrs:{id:"引用技术算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用技术算法"}},[t._v("#")]),t._v(" 引用技术算法")]),t._v(" "),s("ul",[s("li",[t._v("核心:设置引用数,判断当前引用数是否为0")]),t._v(" "),s("li",[t._v("引用关系改变时修改引用数字")]),t._v(" "),s("li",[t._v("引用数字为0时立即回收")])]),t._v(" "),s("h3",{attrs:{id:"优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),s("ul",[s("li",[t._v("发现垃圾时立即回收")]),t._v(" "),s("li",[t._v("最大限度减少程序暂停")])]),t._v(" "),s("h3",{attrs:{id:"缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),s("ul",[s("li",[t._v("无法回收循环引用的对象")]),t._v(" "),s("li",[t._v("时间开销大")])])])}),[],!1,null,null,null);a.default=_.exports}}]);